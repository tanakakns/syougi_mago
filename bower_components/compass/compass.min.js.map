{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/cp","compass.js","node_modules/clusterfck/lib/clusterfck.js","node_modules/clusterfck/lib/distance.js","node_modules/clusterfck/lib/hcluster.js","node_modules/clusterfck/lib/kmeans.js","node_modules/vega-lite/src/globals.js","src/cluster/cluster.js","src/cluster/clusterconsts.js","src/cluster/distance.js","src/consts.js","src/gen/aggregates.js","src/gen/encodings.js","src/gen/encs.js","src/gen/gen.js","src/gen/marktypes.js","src/gen/projections.js","src/globals.js","src/rank/rank.js","src/rank/rankEncodings.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","cp","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"consts","cluster","gen","rank","util","auto","./cluster/cluster","./consts","./gen/gen","./rank/rank","./util",2,"hcluster","Kmeans","kmeans","./hcluster","./kmeans",3,"euclidean","v1","v2","total","Math","pow","sqrt","manhattan","abs","max",4,"distances","HierarchicalClustering","distance","linkage","threshold","this","undefined","Infinity","prototype","items","snapshotPeriod","snapshotCb","clusters","dists","mins","index","value","key","size","j","dist","merged","mergeClosest","forEach","minKey","min","c1","c2","left","right","splice","ci","key1","key2","snapshot","snapshotCallback","./distance",5,"KMeans","centroids","randomCentroids","points","k","slice","sort","round","random","classify","point","ceil","assignment","Array","iterations","movement","assigned","push","centroid","newCentroid","g","sum","toJSON","JSON","stringify","fromJSON","json","parse","vectors",6,"TABLE","RAW","STACKED","INDEX","X","Y","ROW","COL","SIZE","SHAPE","COLOR","ALPHA","TEXT","DETAIL","N","O","Q","T",7,"encodings","opt","table","clusterTrees","clusterfck","e1","e2","s1","vl","Encoding","shorthand","s2","CLUSTER_THRESHOLD","map","tree","traverse","encoding1","encoding2","score","filter","cluster1","cluster2","../util","./clusterconsts",8,"reduceTupleToTable","x","b","d","c","SWAPPABLE","DIST_MISSING","DIST_BY_ENCTYPE","reduce",9,"len","colencs","getEncTypeByColumnName","shorthands","diff","sj","si","get","colenc1","colenc2","cols","union","keys","col","encType","isStack1","isStack","isStack2","encoding","color","name","_colenc","enc","duplicate","marktype",10,"projections","type","properties","omitDotPlot","default","description","maxCardinalityForAutoAddOrdinal","alwaysAddHistogram","aggregates","config","data","tableTypes","enum","genDimQ","minCardinalityForBin","omitMeasureOnly","omitDimensionOnly","addCountForDimensionOnly","aggrList","timeFnList","consistentAutoQ","marktypeList","encodingTypeList","maxGoodCardinalityForFacets","maxCardinalityForFacets","maxGoodCardinalityForColor","maxCardinalityForColor","maxCardinalityForShape","omitTranpose","omitDotPlotWithExtraEncoding","omitMultipleRetinalEncodings","omitNonTextAggrWithAllDimsOnFacets","omitSizeOnBar","omitStackedAverage","alwaysGenerateTableAsHeatmap",11,"genAggregates","output","fields","stats","emit","fieldSet","field","checkAndPush","hasMeasure","hasDimension","hasRaw","tf","isDimension","aggregate","count","pop","assignAggrQ","hasAggr","autoMode","canHaveAggr","cantHaveAggr","assignField","assignBinQ","bin","assignQ","_aggregate","_raw","_bin","ANY","isin","hasNorO","highCardinality","cardinality","isAuto","genBin","genCast","assignFnT","fn","assignT","_fn","schema","extend","any","isTypes","../consts",12,"genEncodingsFromFields","nested","encs","genEncs","dict","genEncodingsFromEncs","list","getMarktypes","markType","finalTouch","scoreFeatures","features","text","et","isMeasure","isCount","stat","stdev","avg","scale","zero","../rank/rank","./encs","./marktypes",13,"retinalEncRules","shape","alpha","colorRules","shapeRules","dimMeaTransposeRule","y","generalRules","genMarkTypes","satisfyRules","geo","arc","row","isAggrWithAllDimOnFacets","isDimX","isDimY","isAggregate","tmpEnc","isDim","rules","dimension","measure","multiple","detail","hasOtherO","../globals",14,"marktypes","charts","cfg","flat","getOpt","fieldSets","genAggr","level","nestedReduce","nestedMap","./aggregates","./encodings","./projections",15,"markTypes","vlmarktypes","facetRule","facetsRule","pointRule","xIsDim","yIsDim","tickRule","isOrdinalScale","barRule","lineRule","areaRule","textRule","marksRule","rule","bar","line","area","tick","mark","compile","marks","reqs","requiredEncoding","support","supportedEncoding",16,"selected","fieldsToAdd","hasSelectedDimension","hasSelectedMeasure","indices","compareFieldsToAdd","setsToAdd","chooseKorLess","setToAdd","concat","typeIsMeasureScore","projection","join",17,"CHART_TYPES","BAR","PLOT","LINE","AREA","MAP","HISTOGRAM","ANY_DATA_TYPES","vega-lite/src/globals",18,"./rankEncodings",19,"rankEncodings","encTypes","encodingMappingByField","mappings","reasons","m","assign","scores","role","reason","apply","UNUSED_POSITION","MARK_SCORE","p","circle","square","D","M","BAD","TERRIBLE","minor","pos","Y_T","facet_text","facet_good","facet_ok","facet_bad","color_good","color_ok","color_bad","color_stack","bad","terrible","dimensionScore","hasOrder","isStacked","measureScore",20,"isArray","obj","toString","sp","v","nonEmpty","grp","node","arr","Object","create","DEFAULT_OPT","powerset","ps","subset","sub","chooseK","kArray","cross"],"mappings":"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","file":"compass.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.cp=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n\n},{\"./cluster/cluster\":7,\"./consts\":10,\"./gen/gen\":14,\"./rank/rank\":18,\"./util\":20}],2:[function(require,module,exports){\nmodule.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};\n},{\"./hcluster\":4,\"./kmeans\":5}],3:[function(require,module,exports){\nmodule.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};\n},{}],4:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n\n},{\"./distance\":3}],5:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}\n},{\"./distance\":3}],6:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.N = 'N';\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],7:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(encodings, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(encodings);\n\n  var clusterTrees = clusterfck.hcluster(encodings, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(encoding1, encoding2) {\n      // sort each cluster -- have the highest score as 1st item\n      return encoding2.score - encoding1.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0].score - cluster1[0].score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":20,\"./clusterconsts\":8,\"./distance\":9,\"clusterfck\":2}],8:[function(require,module,exports){\n'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['color', 'alpha', c.SWAPPABLE],\n  ['size', 'alpha', c.SWAPPABLE],\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n\n},{}],9:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e) { return distance.getEncTypeByColumnName(e); }),\n    shorthands = encodings.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (colenc1, colenc2) {\n  var cols = util.union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(colenc1),\n    isStack2 = vl.Encoding.isStack(colenc2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(colenc1.encoding.color.name !== colenc2.encoding.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.getEncTypeByColumnName = function(encoding) {\n  var _colenc = {},\n    enc = encoding.encoding;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.encType = encType;\n    _colenc[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc,\n    encoding: encoding.encoding\n  };\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":20,\"./clusterconsts\":8}],10:[function(require,module,exports){\n'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'avg']\n    },\n    timeFnList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, alpha, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n\n\n\n},{}],11:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null);\n\nvar consts = require('../consts');\n\nvar ANY='*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fields.length);\n  var hasNorO = vl.any(fields, function(f) {\n    return vl.field.isTypes(f, [N, O]);\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.field.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.field.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggregate) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.field.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggregate = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggregate;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fields[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggregate === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggregate = f.aggregate;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggregate) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggregate);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === ANY || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [ANY, 'bin', 'cast', 'autocast'])) && !hasNorO) {\n        var highCardinality = vl.field.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [ANY, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [ANY, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignFnT(i, hasAggr, autoMode, fn) {\n    tf[i].fn = fn;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].fn;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fields[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._fns\n    if (f._fn) {\n      assignFnT(i, hasAggr, autoMode, f._fn);\n    } else {\n      opt.timeFnList.forEach(function(fn) {\n        if (fn === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignFnT(i, hasAggr, autoMode, fn);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fields.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fields[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case Q:\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case T:\n        assignT(i, hasAggr, autoMode);\n        break;\n      case O:\n        /* falls through */\n      case N:\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, ANY);\n\n  return output;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":10}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  genEncs = require('./encs'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genEncodingsFromFields;\n\nfunction genEncodingsFromFields(output, fields, stats, opt, nested) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encs = genEncs([], fields, stats, opt);\n\n  if (nested) {\n    return encs.reduce(function(dict, enc) {\n      dict[enc] = genEncodingsFromEncs([], enc, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encs.reduce(function(list, enc) {\n      return genEncodingsFromEncs(list, enc, stats, opt);\n    }, []);\n  }\n}\n\nfunction genEncodingsFromEncs(output, enc, stats, opt) {\n  getMarktypes(enc, stats, opt)\n    .forEach(function(markType) {\n      var e = vl.duplicate({\n          data: opt.data,\n          marktype: markType,\n          encoding: enc,\n          config: opt.config\n        }),\n        encoding = finalTouch(e, stats, opt),\n        score = rank.encoding(encoding, stats, opt);\n\n      encoding.score = score.score;\n      encoding.scoreFeatures = score.features;\n      output.push(encoding);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(encoding, stats, opt) {\n  if (encoding.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    encoding.encoding.color = encoding.encoding.text;\n  }\n\n  // don't include zero if stdev/avg < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var enc = encoding.encoding;\n  ['x', 'y'].forEach(function(et) {\n    var field = enc[et];\n    if (field && vl.field.isMeasure(field) && !vl.field.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat && stat.stdev / stat.avg < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return encoding;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":10,\"../rank/rank\":18,\"./encs\":13,\"./marktypes\":15}],13:[function(require,module,exports){\n(function (global){\n\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.field.isDimension,\n  isMeasure = vl.field.isMeasure;\n\nmodule.exports = genEncs;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  alpha: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(enc, field, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (enc.color || enc.size || enc.shape || enc.alpha) return false;\n  }\n  return true;\n}\n\nfunction colorRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  return vl.field.isMeasure(field) ||\n    vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  if (field.bin && field.type === Q) return false;\n  if (field.fn && field.type === T) return false;\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(enc) {\n  // create horizontal histogram for ordinal\n  if (vl.field.isTypes(enc.y, [N, O]) && isMeasure(enc.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(enc.y) && (!vl.field.isTypes(enc.x, [N, O]) && isDimension(enc.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(enc, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (enc.text) {\n    return genMarkTypes.satisfyRules(enc, TEXT, stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (enc.x || enc.y || enc.geo || enc.arc) {\n\n    if (enc.row || enc.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!enc.x || !enc.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncs.isAggrWithAllDimOnFacets(enc)) return false;\n      }\n    }\n\n    if (enc.x && enc.y) {\n      var isDimX = !!isDimension(enc.x),\n        isDimY = !!isDimension(enc.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(enc)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(enc)) return false;\n        } else if (enc.y.type===T || enc.x.type === T) {\n          if (enc.y.type===T && enc.x.type !== T) return false;\n        } else { // show only one OxO, QxQ\n          if (enc.x.name > enc.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // one dimension \"count\" is useless\n    if (enc.x && enc.x.aggregate == 'count' && !enc.y) return false;\n    if (enc.y && enc.y.aggregate == 'count' && !enc.x) return false;\n\n    return true;\n  }\n  return false;\n}\n\ngenEncs.isAggrWithAllDimOnFacets = function (enc) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in enc) {\n    var field = enc[encType];\n    if (field.aggregate) {\n      hasAggr = true;\n    }\n    if (vl.field.isDimension(field) && (encType !== ROW && encType !== COL)) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncs(encs, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  // generate a collection vega-lite's enc\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEnc, stats, opt)) {\n        encs.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in opt.encodingTypeList) {\n      var et = opt.encodingTypeList[j],\n        isDim = isDimension(field);\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) && // encoding not used\n        ((isDim && rules[et].dimension) || (!isDim && rules[et].measure)) &&\n        (!rules[et].rules || rules[et].rules(tmpEnc, field, stats, opt))\n      ) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encs;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":10,\"../globals\":17,\"./marktypes\":15}],14:[function(require,module,exports){\n'use strict';\n\nvar util = require('../util');\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variatons\n  encodings: require('./encodings'),\n  encs: require('./encs'),\n  marktypes: require('./marktypes')\n};\n\ngen.charts = function(fields, opt, cfg, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fields, opt) : [fields],\n    encs, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggregate)) {\n    encs = fieldSets.reduce(function(output, fields) {\n      return gen.encs(output, fields, opt);\n    }, []);\n  } else {\n    encs = fieldSets.map(function(fields) {\n      return gen.encs([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encs, function(output, enc) {\n      return gen.marktypes(output, enc, opt, cfg);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encs, function(enc) {\n      return gen.marktypes([], enc, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};\n},{\"../util\":20,\"./aggregates\":11,\"./encodings\":12,\"./encs\":13,\"./marktypes\":15,\"./projections\":16}],15:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  isDimension = vl.field.isDimension,\n  isOrdinalScale = vl.field.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(enc, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n\n  var markTypes = opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(enc, markType, stats, opt);\n  });\n\n  return markTypes;\n}\n\nvlmarktypes.satisfyRules = function (enc, markType, stats, opt) {\n  var mark = vl.compile.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in enc)) return false;\n  }\n\n  for (var encType in enc) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](enc, stats, opt);\n};\n\nfunction facetRule(field, stats, opt) {\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(enc, stats, opt) {\n  if(enc.row && !facetRule(enc.row, stats, opt)) return false;\n  if(enc.col && !facetRule(enc.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDimension(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(enc, stats, opt) {\n  // jshint unused:false\n  if (enc.x || enc.y) {\n    if(vl.enc.isAggregate(enc)) return false;\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    return (!xIsDim && (!enc.y || isOrdinalScale(enc.y))) ||\n      (!yIsDim && (!enc.x || isOrdinalScale(enc.x)));\n  }\n  return false;\n}\n\nfunction barRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // need to aggregate on either x or y\n  if (opt.omitSizeOnBar && enc.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  if (((enc.x.aggregate !== undefined) ^ (enc.y.aggregate !== undefined)) &&\n      (isDimension(enc.x) ^ isDimension(enc.y))) {\n\n    var aggregate = enc.x.aggregate || enc.y.aggregate;\n    return !(opt.omitStackedAverage && aggregate ==='avg' && enc.color);\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x.type == 'T' && enc.x.fn && enc.y.type == 'Q' && enc.y.aggregate;\n}\n\nfunction areaRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  if(!lineRule(enc, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && enc.y.aggregate ==='avg' && enc.color);\n}\n\nfunction textRule(enc, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (enc.row || enc.col) && enc.text && enc.text.aggregate && !enc.x && !enc.y && !enc.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !enc.color);\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":10}],16:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fields array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fields.forEach(function(field, index){\n    //save indices for stable sort later\n    indices[field.name] = index;\n\n    if (field.selected) {\n      selected.push(field);\n      if (isDimension(field) || field.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (field.selected !== false && !vl.field.isCount(field)) {\n      if (vl.field.isDimension(field) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.field.cardinality(field, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(field);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  N: 0,\n  O: 1,\n  T: 2,\n  Q: 3\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.field.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":10,\"../util\":20}],17:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar g = global || window;\n\nrequire('vega-lite/src/globals');\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"vega-lite/src/globals\":6}],18:[function(require,module,exports){\nmodule.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n\n},{\"./rankEncodings\":19}],19:[function(require,module,exports){\n(function (global){\n'use strict';\n\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(encoding, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(encoding.encoding),\n    marktype = encoding.marktype,\n    enc = encoding.encoding;\n\n  var encodingMappingByField = vl.enc.reduce(encoding.encoding, function(o, field, encType) {\n    var key = vl.field.shorthand(field);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: field});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.field.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.field.role(m.field);\n        var score = rankEncodings.score[role](m.field, m.encType, encoding.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === TEXT) {\n    // TODO\n  } else {\n    if (enc.x && enc.y) {\n      if (isDimension(enc.x) ^ isDimension(enc.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== TEXT) {\n    if ((!enc.x || !enc.y) && !enc.geo && !enc.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.alpha = 0.45;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (field, encType, marktype, stats, opt){\n  var cardinality = vl.field.cardinality(field, stats);\n  switch (encType) {\n    case X:\n      if (vl.field.isTypes(field, [N, O]))  return D.pos - D.minor;\n      return D.pos;\n\n    case Y:\n      if (vl.field.isTypes(field, [N, O])) return D.pos - D.minor; //prefer ordinal on y\n      if(field.type === T) return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case COL:\n      if (marktype === TEXT) return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case ROW:\n      if (marktype === TEXT) return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case COLOR:\n      var hasOrder = (field.bin && field.type===Q) || (field.fn && field.type===T);\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype === 'bar' || marktype === 'area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case SHAPE:\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case DETAIL:\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (field, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case X: return M.pos;\n    case Y: return M.pos;\n    case SIZE:\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === TEXT) return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case COLOR: return M.color;\n    case 'alpha': return M.alpha;\n    case TEXT: return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../globals\":17}],20:[function(require,module,exports){\n\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n\n},{\"./consts\":10}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","module.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};","module.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};","var distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n","var distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.N = 'N';\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n","\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(encodings, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(encodings);\n\n  var clusterTrees = clusterfck.hcluster(encodings, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(encoding1, encoding2) {\n      // sort each cluster -- have the highest score as 1st item\n      return encoding2.score - encoding1.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0].score - cluster1[0].score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}","'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['color', 'alpha', c.SWAPPABLE],\n  ['size', 'alpha', c.SWAPPABLE],\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e) { return distance.getEncTypeByColumnName(e); }),\n    shorthands = encodings.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (colenc1, colenc2) {\n  var cols = util.union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(colenc1),\n    isStack2 = vl.Encoding.isStack(colenc2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(colenc1.encoding.color.name !== colenc2.encoding.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.getEncTypeByColumnName = function(encoding) {\n  var _colenc = {},\n    enc = encoding.encoding;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.encType = encType;\n    _colenc[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc,\n    encoding: encoding.encoding\n  };\n};","'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'avg']\n    },\n    timeFnList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, alpha, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n\n\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null);\n\nvar consts = require('../consts');\n\nvar ANY='*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fields.length);\n  var hasNorO = vl.any(fields, function(f) {\n    return vl.field.isTypes(f, [N, O]);\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.field.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.field.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggregate) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.field.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggregate = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggregate;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fields[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggregate === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggregate = f.aggregate;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggregate) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggregate);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === ANY || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [ANY, 'bin', 'cast', 'autocast'])) && !hasNorO) {\n        var highCardinality = vl.field.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [ANY, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [ANY, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignFnT(i, hasAggr, autoMode, fn) {\n    tf[i].fn = fn;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].fn;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fields[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._fns\n    if (f._fn) {\n      assignFnT(i, hasAggr, autoMode, f._fn);\n    } else {\n      opt.timeFnList.forEach(function(fn) {\n        if (fn === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignFnT(i, hasAggr, autoMode, fn);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fields.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fields[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case Q:\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case T:\n        assignT(i, hasAggr, autoMode);\n        break;\n      case O:\n        /* falls through */\n      case N:\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, ANY);\n\n  return output;\n}\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  genEncs = require('./encs'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genEncodingsFromFields;\n\nfunction genEncodingsFromFields(output, fields, stats, opt, nested) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encs = genEncs([], fields, stats, opt);\n\n  if (nested) {\n    return encs.reduce(function(dict, enc) {\n      dict[enc] = genEncodingsFromEncs([], enc, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encs.reduce(function(list, enc) {\n      return genEncodingsFromEncs(list, enc, stats, opt);\n    }, []);\n  }\n}\n\nfunction genEncodingsFromEncs(output, enc, stats, opt) {\n  getMarktypes(enc, stats, opt)\n    .forEach(function(markType) {\n      var e = vl.duplicate({\n          data: opt.data,\n          marktype: markType,\n          encoding: enc,\n          config: opt.config\n        }),\n        encoding = finalTouch(e, stats, opt),\n        score = rank.encoding(encoding, stats, opt);\n\n      encoding.score = score.score;\n      encoding.scoreFeatures = score.features;\n      output.push(encoding);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(encoding, stats, opt) {\n  if (encoding.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    encoding.encoding.color = encoding.encoding.text;\n  }\n\n  // don't include zero if stdev/avg < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var enc = encoding.encoding;\n  ['x', 'y'].forEach(function(et) {\n    var field = enc[et];\n    if (field && vl.field.isMeasure(field) && !vl.field.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat && stat.stdev / stat.avg < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return encoding;\n}","\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.field.isDimension,\n  isMeasure = vl.field.isMeasure;\n\nmodule.exports = genEncs;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  alpha: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(enc, field, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (enc.color || enc.size || enc.shape || enc.alpha) return false;\n  }\n  return true;\n}\n\nfunction colorRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  return vl.field.isMeasure(field) ||\n    vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  if (field.bin && field.type === Q) return false;\n  if (field.fn && field.type === T) return false;\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(enc) {\n  // create horizontal histogram for ordinal\n  if (vl.field.isTypes(enc.y, [N, O]) && isMeasure(enc.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(enc.y) && (!vl.field.isTypes(enc.x, [N, O]) && isDimension(enc.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(enc, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (enc.text) {\n    return genMarkTypes.satisfyRules(enc, TEXT, stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (enc.x || enc.y || enc.geo || enc.arc) {\n\n    if (enc.row || enc.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!enc.x || !enc.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncs.isAggrWithAllDimOnFacets(enc)) return false;\n      }\n    }\n\n    if (enc.x && enc.y) {\n      var isDimX = !!isDimension(enc.x),\n        isDimY = !!isDimension(enc.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(enc)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(enc)) return false;\n        } else if (enc.y.type===T || enc.x.type === T) {\n          if (enc.y.type===T && enc.x.type !== T) return false;\n        } else { // show only one OxO, QxQ\n          if (enc.x.name > enc.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // one dimension \"count\" is useless\n    if (enc.x && enc.x.aggregate == 'count' && !enc.y) return false;\n    if (enc.y && enc.y.aggregate == 'count' && !enc.x) return false;\n\n    return true;\n  }\n  return false;\n}\n\ngenEncs.isAggrWithAllDimOnFacets = function (enc) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in enc) {\n    var field = enc[encType];\n    if (field.aggregate) {\n      hasAggr = true;\n    }\n    if (vl.field.isDimension(field) && (encType !== ROW && encType !== COL)) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncs(encs, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  // generate a collection vega-lite's enc\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEnc, stats, opt)) {\n        encs.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in opt.encodingTypeList) {\n      var et = opt.encodingTypeList[j],\n        isDim = isDimension(field);\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) && // encoding not used\n        ((isDim && rules[et].dimension) || (!isDim && rules[et].measure)) &&\n        (!rules[et].rules || rules[et].rules(tmpEnc, field, stats, opt))\n      ) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encs;\n}\n","'use strict';\n\nvar util = require('../util');\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variatons\n  encodings: require('./encodings'),\n  encs: require('./encs'),\n  marktypes: require('./marktypes')\n};\n\ngen.charts = function(fields, opt, cfg, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fields, opt) : [fields],\n    encs, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggregate)) {\n    encs = fieldSets.reduce(function(output, fields) {\n      return gen.encs(output, fields, opt);\n    }, []);\n  } else {\n    encs = fieldSets.map(function(fields) {\n      return gen.encs([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encs, function(output, enc) {\n      return gen.marktypes(output, enc, opt, cfg);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encs, function(enc) {\n      return gen.marktypes([], enc, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};","\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  isDimension = vl.field.isDimension,\n  isOrdinalScale = vl.field.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(enc, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n\n  var markTypes = opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(enc, markType, stats, opt);\n  });\n\n  return markTypes;\n}\n\nvlmarktypes.satisfyRules = function (enc, markType, stats, opt) {\n  var mark = vl.compile.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in enc)) return false;\n  }\n\n  for (var encType in enc) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](enc, stats, opt);\n};\n\nfunction facetRule(field, stats, opt) {\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(enc, stats, opt) {\n  if(enc.row && !facetRule(enc.row, stats, opt)) return false;\n  if(enc.col && !facetRule(enc.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDimension(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(enc, stats, opt) {\n  // jshint unused:false\n  if (enc.x || enc.y) {\n    if(vl.enc.isAggregate(enc)) return false;\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    return (!xIsDim && (!enc.y || isOrdinalScale(enc.y))) ||\n      (!yIsDim && (!enc.x || isOrdinalScale(enc.x)));\n  }\n  return false;\n}\n\nfunction barRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // need to aggregate on either x or y\n  if (opt.omitSizeOnBar && enc.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  if (((enc.x.aggregate !== undefined) ^ (enc.y.aggregate !== undefined)) &&\n      (isDimension(enc.x) ^ isDimension(enc.y))) {\n\n    var aggregate = enc.x.aggregate || enc.y.aggregate;\n    return !(opt.omitStackedAverage && aggregate ==='avg' && enc.color);\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x.type == 'T' && enc.x.fn && enc.y.type == 'Q' && enc.y.aggregate;\n}\n\nfunction areaRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  if(!lineRule(enc, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && enc.y.aggregate ==='avg' && enc.color);\n}\n\nfunction textRule(enc, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (enc.row || enc.col) && enc.text && enc.text.aggregate && !enc.x && !enc.y && !enc.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !enc.color);\n}","'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fields array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fields.forEach(function(field, index){\n    //save indices for stable sort later\n    indices[field.name] = index;\n\n    if (field.selected) {\n      selected.push(field);\n      if (isDimension(field) || field.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (field.selected !== false && !vl.field.isCount(field)) {\n      if (vl.field.isDimension(field) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.field.cardinality(field, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(field);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  N: 0,\n  O: 1,\n  T: 2,\n  Q: 3\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.field.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n","'use strict';\n\nvar g = global || window;\n\nrequire('vega-lite/src/globals');\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;","module.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n","'use strict';\n\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(encoding, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(encoding.encoding),\n    marktype = encoding.marktype,\n    enc = encoding.encoding;\n\n  var encodingMappingByField = vl.enc.reduce(encoding.encoding, function(o, field, encType) {\n    var key = vl.field.shorthand(field);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: field});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.field.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.field.role(m.field);\n        var score = rankEncodings.score[role](m.field, m.encType, encoding.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === TEXT) {\n    // TODO\n  } else {\n    if (enc.x && enc.y) {\n      if (isDimension(enc.x) ^ isDimension(enc.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== TEXT) {\n    if ((!enc.x || !enc.y) && !enc.geo && !enc.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.alpha = 0.45;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (field, encType, marktype, stats, opt){\n  var cardinality = vl.field.cardinality(field, stats);\n  switch (encType) {\n    case X:\n      if (vl.field.isTypes(field, [N, O]))  return D.pos - D.minor;\n      return D.pos;\n\n    case Y:\n      if (vl.field.isTypes(field, [N, O])) return D.pos - D.minor; //prefer ordinal on y\n      if(field.type === T) return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case COL:\n      if (marktype === TEXT) return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case ROW:\n      if (marktype === TEXT) return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case COLOR:\n      var hasOrder = (field.bin && field.type===Q) || (field.fn && field.type===T);\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype === 'bar' || marktype === 'area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case SHAPE:\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case DETAIL:\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (field, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case X: return M.pos;\n    case Y: return M.pos;\n    case SIZE:\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === TEXT) return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case COLOR: return M.color;\n    case 'alpha': return M.alpha;\n    case TEXT: return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n","\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n"],"sourceRoot":"/source/"}