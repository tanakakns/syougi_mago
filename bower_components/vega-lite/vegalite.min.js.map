{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","node_modules/browserify/node_modules/process/browser.js","node_modules/datalib/src/bin.js","node_modules/datalib/src/date-units.js","node_modules/datalib/src/generate.js","node_modules/datalib/src/stats.js","node_modules/datalib/src/summary.js","node_modules/datalib/src/util.js","src/Encoding.js","src/compile/aggregate.js","src/compile/axis.js","src/compile/bin.js","src/compile/compile.js","src/compile/facet.js","src/compile/filter.js","src/compile/group.js","src/compile/layout.js","src/compile/legend.js","src/compile/marks.js","src/compile/scale.js","src/compile/sort.js","src/compile/stack.js","src/compile/style.js","src/compile/subfacet.js","src/compile/template.js","src/compile/time.js","src/consts.js","src/data.js","src/enc.js","src/field.js","src/globals.js","src/schema/schema.js","src/schema/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","extend","Encoding","compile","data","field","enc","schema","toShorthand","shorthand","./Encoding","./compile/compile","./consts","./data","./enc","./field","./globals","./schema/schema","./util",2,3,"drainQueue","draining","currentQueue","len","queue","noop","process","nextTick","fun","push","setTimeout","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask",4,"bin","opt","step","logb","level","minstep","precision","v","eps","maxb","maxbins","base","Math","log","div","min","max","span","steps","bisect","ceil","pow","round","floor","start","stop","unit","value","index","x","lo","hi","mid","cmp","this","EPSILON","date_value","date","date_index","units","dmin","dmax","minb","minbins","find","bins","raw","./date-units",5,"STEPS","entries","type","format","d","Date","UTC","isNumber","getUTCFullYear","getUTCMonth","minuteOfHour","getUTCMinutes","hourOfDay","getUTCHours","dayOfWeek","getUTCDay","dayOfMonth","getUTCDate","monthOfYear","second","minute","hour","day","month","year","timesteps",6,"gen","repeat","val","Array","zeros","range","arguments","Infinity","j","random","uniform","undefined","samples","map","integer","b","normal","mean","stdev","next","rds","c","y","sqrt",7,"stats","unique","values","results","isArray","counts","count","distinct","nulls","median","filter","isNotNull","sort","half","quantile","p","identity","H","h","delta","isNaN","variance","M2","modeskew","avg","med","std","extent","dot","sum","rank","mu","idx","comparator","tie","cor","fn","mua","mub","sda","sdb","ra","rb","dist","aa","bb","ab","X","Y","A","mat","B","exp","isFunction","abs","m","R","M","entropy","N","LN2","normalized","mutual","z","px","py","I","profile","sd","vals","iqr","./generate",8,"printSummary","profiles","str","forEach","printCategoricalProfile","printQuantitativeProfile","join","list","top","keys","slice","concat","fields","accessor","toString","./stats",9,"util_escape_str","replace","escape_str_re","truncateOnWord","rev","cnt","tok","split","truncate_word_re","reverse","w","trim","Buffer","isNode","stderr","Object","prototype","isObject","obj","isString","parseFloat","isFinite","isBoolean","isDate","isBuffer","number","parse","array","JSON","stringify","duplicate","equal","k","toMap","reduce","keystr","shift","apply","mutator","sign","NaN","numcmp","stablesort","sortBy","keyFn","indices","sa","sb","startsWith","String","string","searchString","lastIndexOf","truncate","pos","word","ellipsis","l1","l2","_process","buffer",10,"vlfield","vlenc","marktype","config","theme","defaults","instantiate","spec","dataTypes","specExtended","merge","_data","_marktype","_enc","_config","_filter","proto","is","has","encType","et","filterNull","fieldList","fieldName","Q","containsType","T","O","operands","operator","nodata","nofn","isCount","aggr","fieldTitle","displayName","toUpperCase","scale","axis","band","bandSize","useSmallBand","ROW","COL","size","MAXBINS_DEFAULT","legend","isType","byCode","toggleSort","support","qField","init","role","text","prop","TEXT","font","fieldDef","isOrdinalScale","encoding","isDimension","isMeasure","isAggregate","alwaysNoOcclusion","isStack","color","cardinality","isRaw","hasValues","toSpec","excludeConfig","excludeData","dataTypeNames","subtract","assign","delim","fromShorthand","specFromShorthand","fromSpec","transpose","oldenc","row","col","direction","useTypeCode","mode","get","toggleFilterNullO","./compile/time",11,"aggregates","dims","meas","detail","facets","op","transform","groupby","details","aggregated","../globals","../util",12,"axis_title","def","layout","maxlength","cellWidth","cellHeight","setter","angle","align","baseline","dy","height","titleOffset","axisTitleOffset","axis_labels","time","hasScale","textTemplatePath","maxLabelLength","getter","names","props","defs","isCol","isRow","rowOffset","cellPadding","grid","layer","offset","stroke","x2","group","mult","opacity","orient","ticks","./time",13,"binning","output",14,"summary","marks","aggregate","facet","stack","style","subfacet","template","mark","mdefs","mdef","addFilters","sorting","hasRow","hasCol","lineType","line","aggResult","hasDetails","from","by","legends","scales","properties","update","axes","filterLessThanZero","../Encoding","./aggregate","./axis","./bin","./facet","./filter","./group","./layout","./legend","./marks","./scale","./sort","./stack","./style","./subfacet","./template","datalib/src/summary",15,"faceting","axesGrp","enter","facetKeys","cellAxes","fill","error","unshift","groupdef","width","trans",16,"BINARY",">",">=","=","!=","<","<=","filters","condition","op1","op2","console","warn","test",17,"_name",18,"vllayout","box","hasX","hasY","xCardinality","yCardinality","padding","colCardinality","rowCardinality","getMaxLength","maxLength","../field","../schema/schema",19,"COLOR","SIZE","SHAPE","shape","labels",20,"bar_props","xc","y2","yc","ALPHA","point_props","strokeWidth","line_props","area_props","tick_props","filled_point_props","text_props","fontSize","fontWeight","fontStyle","bg","TABLE","bar","requiredEncoding","supportedEncoding","alpha","area","tick","circle","square","point",21,"scale_domain","domain","getbins","STACKED","getDataset","scale_range","bandWidth","zero","nice","colorRange","outerPadding","points",22,"addSortTransforms","datasetMapping","counter","byClause","dataName","transforms","source","RAW",23,"stacking","dim","isXMeasure","isYMeasure","stacked","y1","y0",24,"estimateOpacity","numPoints","numMultiples",25,"subfaceting","g",26,"table","dataUrl","dataType","url","../data",27,"timeFields","timeFn","tf","fieldFn","func","stat","yearstat","formula","expr","labelLength","substr","isOrdinalFn","isColor",28,"encodingTypes","DETAIL",29,"vldata","types","boolean",30,"encTypes","countRetinal","arr","indexOf","convertType","enctype",31,"getIsType","byName","shorthands","timefns","typeOrder","G","order","typeThenName","toLowerCase","original","typeThenCardinality",32,"INDEX",33,"enum","supportedEnums","supportedTypes","minimum","default","getSupportedRole","supportedRole","defaultTimeFn","scale_type","clone","typicalField","description","onlyOrdinalField","dimension","axisMixin","supportedMarktypes","sortMixin","items","required","bandMixin","legendMixin","textMixin","margin","weight","family","sizeMixin","colorMixin","alphaMixin","maximum","shapeMixin","detailMixin","rowMixin","colMixin","facetMixin","requiredNameType","multiRoleField","measure","quantitativeField","onlyQuantitativeField","formatType","additionalProperties","viewport","gridColor","gridOpacity","singleHeight","singleWidth","largeBandSize","smallBandSize","largeBandMaxCardinality","cellGridColor","cellBackgroundColor","textCellWidth","timeScaleLabelLength","characterWidth","$schema","./schemautil",34,"dest","src","hasOwnProperty","constructor","schemautil","isEmpty","instance","changes","ins",35,"isin","item","thisArg","any","all","noaugment","msg","datalib/src/bin","datalib/src/generate","datalib/src/util"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = {};\n\nutil.extend(vl, consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = {};\n\nutil.extend(vl, consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n\n},{\"./Encoding\":10,\"./compile/compile\":14,\"./consts\":28,\"./data\":29,\"./enc\":30,\"./field\":31,\"./globals\":32,\"./schema/schema\":33,\"./util\":35}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(require,module,exports){\nvar util = require('./util');\nvar units = require('./date-units');\nvar EPSILON = 1e-15;\n\nfunction bin(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 15,\n      base = opt.base || 10,\n      logb = Math.log(base),\n      div = opt.div || [5, 2],      \n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step, logb, level, minstep, precision, v, i, eps;\n\n  if (opt.step != null) {\n    // if step size is explicitly given, use that\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n      opt.steps.length - 1,\n      bisect(opt.steps, span/maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = opt.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n    \n    // increase step size if too many bins\n    do { step *= base; } while (Math.ceil(span/step) > maxb);\n\n    // decrease step size if allowed\n    for (i=0; i<div.length; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step,\n    unit:  {precision: precision},\n    value: value,\n    index: index\n  };\n};\n\nfunction bisect(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n};\n\nfunction value(v) {\n  return this.step * Math.floor(v / this.step + EPSILON);\n}\n\nfunction index(v) {\n  return Math.floor((v - this.start) / this.step + EPSILON);\n}\n\nfunction date_value(v) {\n  return this.unit.date(value.call(this, v));\n}\n\nfunction date_index(v) {\n  return index.call(this, this.unit.unit(v));\n}\n\nbin.date = function(opt) {\n  opt = opt || {};\n\n  // find time step, then bin\n  var dmin = opt.min,\n      dmax = opt.max,\n      maxb = opt.maxbins || 20,\n      minb = opt.minbins || 4,\n      span = (+dmax) - (+dmin);\n      unit = opt.unit ? units[opt.unit] : units.find(span, minb, maxb),\n      bins = bin({\n        min:     unit.min != null ? unit.min : unit.unit(dmin),\n        max:     unit.max != null ? unit.max : unit.unit(dmax),\n        maxbins: maxb,\n        minstep: unit.minstep,\n        steps:   unit.step\n      });\n\n  bins.unit = unit;\n  bins.index = date_index;\n  if (!opt.raw) bins.value = date_value;\n  return bins;\n};\n\nmodule.exports = bin;\n\n},{\"./date-units\":5,\"./util\":9}],5:[function(require,module,exports){\nvar util = require('./util');\n\nvar STEPS = [\n  [31536e6, 5],  // 1-year\n  [7776e6, 4],   // 3-month\n  [2592e6, 4],   // 1-month\n  [12096e5, 3],  // 2-week\n  [6048e5, 3],   // 1-week\n  [1728e5, 3],   // 2-day\n  [864e5, 3],    // 1-day\n  [432e5, 2],    // 12-hour\n  [216e5, 2],    // 6-hour\n  [108e5, 2],    // 3-hour\n  [36e5, 2],     // 1-hour\n  [18e5, 1],     // 30-minute\n  [9e5, 1],      // 15-minute\n  [3e5, 1],      // 5-minute\n  [6e4, 1],      // 1-minute\n  [3e4, 0],      // 30-second\n  [15e3, 0],     // 15-second\n  [5e3, 0],      // 5-second\n  [1e3, 0]       // 1-second\n];\n\nvar entries = [\n  {\n    type: \"second\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M:%S.%L\",\n    date: function(d) {\n      return new Date(d * 1e3);\n    },\n    unit: function(d) {\n      return (+d / 1e3);\n    }\n  },\n  {\n    type: \"minute\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M\",\n    date: function(d) {\n      return new Date(d * 6e4);\n    },\n    unit: function(d) {\n      return ~~(+d / 6e4);\n    }\n  },\n  {\n    type: \"hour\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:00\",\n    date: function(d) {\n      return new Date(d * 36e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 36e5);\n    }\n  },\n  {\n    type: \"day\",\n    minstep: 1,\n    step: [1, 7],\n    format: \"%Y %b %-d\",\n    date: function(d) {\n      return new Date(d * 864e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 864e5);\n    }\n  },\n  {\n    type: \"month\",\n    minstep: 1,\n    step: [1, 3, 6],\n    format: \"%b %Y\",\n    date: function(d) {\n      return new Date(Date.UTC(~~(d / 12), d % 12, 1));\n    },\n    unit: function(d) {\n      if (util.isNumber(d)) d = new Date(d);\n      return 12 * d.getUTCFullYear() + d.getUTCMonth();\n    }\n  },\n  {\n    type: \"year\",\n    minstep: 1,\n    format: \"%Y\",\n    date: function(d) {\n      return new Date(Date.UTC(d, 0, 1));\n    },\n    unit: function(d) {\n      return (util.isNumber(d) ? new Date(d) : d).getUTCFullYear();\n    }\n  }\n];\n\nvar minuteOfHour = {\n  type: \"minuteOfHour\",\n  min: 0,\n  max: 59,\n  minstep: 1,\n  format: \"%M\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMinutes();\n  }\n};\n\nvar hourOfDay = {\n  type: \"hourOfDay\",\n  min: 0,\n  max: 23,\n  minstep: 1,\n  format: \"%H\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCHours();\n  }\n};\n\nvar dayOfWeek = {\n  type: \"dayOfWeek\",\n  min: 0,\n  max: 6,\n  step: [1],\n  format: \"%a\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 4 + d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDay();\n  }\n};\n\nvar dayOfMonth = {\n  type: \"dayOfMonth\",\n  min: 1,\n  max: 31,\n  step: [1],\n  format: \"%-d\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDate();\n  }\n};\n\nvar monthOfYear = {\n  type: \"monthOfYear\",\n  min: 0,\n  max: 11,\n  step: [1],\n  format: \"%b\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, d % 12, 1));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMonth();\n  }\n};\n\nvar units = {\n  \"second\":       entries[0],\n  \"minute\":       entries[1],\n  \"hour\":         entries[2],\n  \"day\":          entries[3],\n  \"month\":        entries[4],\n  \"year\":         entries[5],\n  \"minuteOfHour\": minuteOfHour,\n  \"hourOfDay\":    hourOfDay,\n  \"dayOfWeek\":    dayOfWeek,\n  \"dayOfMonth\":   dayOfMonth,\n  \"monthOfYear\":  monthOfYear,\n  \"timesteps\":    entries\n};\n\nunits.find = function(span, minb, maxb) {\n  var i, len, bins, step = STEPS[0];\n\n  for (i = 1, len = STEPS.length; i < len; ++i) {\n    step = STEPS[i];\n    if (span > step[0]) {\n      bins = span / step[0];\n      if (bins > maxb) {\n        return entries[STEPS[i - 1][1]];\n      }\n      if (bins >= minb) {\n        return entries[step[1]];\n      }\n    }\n  }\n  return entries[STEPS[STEPS.length - 1][1]];\n};\n\nmodule.exports = units;\n\n},{\"./util\":9}],6:[function(require,module,exports){\nvar gen = module.exports = {};\n\ngen.repeat = function(val, n) {\n  var a = Array(n), i;\n  for (i=0; i<n; ++i) a[i] = val;\n  return a;\n};\n\ngen.zeros = function(n) {\n  return gen.repeat(0, n);\n};\n\ngen.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('Infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\ngen.random = {};\n\ngen.random.uniform = function(min, max) {\n  if (max === undefined) {\n\t\tmax = min;\n\t\tmin = 0;\n\t}\n\tvar d = max - min;\n\tvar f = function() {\n\t\treturn min + d * Math.random();\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.integer = function(a, b) {\n\tif (b === undefined) {\n\t\tb = a;\n\t\ta = 0;\n\t}\n  var d = b - a;\n\tvar f = function() {\n\t\treturn a + Math.floor(d * Math.random());\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.normal = function(mean, stdev) {\n\tmean = mean || 0;\n\tstdev = stdev || 1;\n\tvar next = undefined;\n\tvar f = function() {\n\t\tvar x = 0, y = 0, rds, c;\n\t\tif (next !== undefined) {\n\t\t\tx = next;\n\t\t\tnext = undefined;\n\t\t\treturn x;\n\t\t}\n\t\tdo {\n\t\t\tx = Math.random()*2-1;\n\t\t\ty = Math.random()*2-1;\n\t\t\trds = x*x + y*y;\n\t\t} while (rds == 0 || rds > 1);\n\t\tc = Math.sqrt(-2*Math.log(rds)/rds); // Box-Muller transform\n\t\tnext = mean + y*c*stdev;\n\t\treturn mean + x*c*stdev;\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n},{}],7:[function(require,module,exports){\nvar util = require('./util');\nvar gen = require('./generate');\nvar stats = {};\n\n// Collect unique values and associated counts.\n// Output: an array of unique values, in observed order\n// The array includes an additional 'counts' property,\n// which is a hash from unique values to occurrence counts.\nstats.unique = function(values, f, results) {\n  if (!util.isArray(values) || values.length===0) return [];\n  results = results || [];\n  var u = {}, v, i;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) {\n      u[v] += 1;\n    } else {\n      u[v] = 1;\n      results.push(v);\n    }\n  }\n  results.counts = u;\n  return results;\n};\n\n// Count the number of non-null values.\nstats.count = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var v, i, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v != null) count += 1;\n  }\n  return count;\n};\n\n// Count the number of distinct values.\nstats.count.distinct = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var u = {}, v, i, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) continue;\n    u[v] = 1;\n    count += 1;\n  }\n  return count;\n};\n\n// Count the number of null or undefined values.\nstats.count.nulls = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var v, i, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v == null) count += 1;\n  }\n  return count;\n};\n\n// Compute the median of an array of numbers.\nstats.median = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  if (f) values = values.map(f);\n  values = values.filter(util.isNotNull).sort(util.cmp);\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\n// Compute the quantile of a sorted array of numbers.\n// Adapted from the D3.js implementation.\nstats.quantile = function(values, f, p) {\n  if (p === undefined) { p = f; f = util.identity; }\n  var H = (values.length - 1) * p + 1,\n      h = Math.floor(H),\n      v = +f(values[h - 1]),\n      e = H - h;\n  return e ? v + e * (f(values[h]) - v) : v;\n};\n\n// Compute the mean (average) of an array of numbers.\nstats.mean = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var mean = 0, delta, i, c, v;\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v != null && !isNaN(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n    }\n  }\n  return mean;\n};\n\n// Compute the sample variance of an array of numbers.\nstats.variance = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var mean = 0, M2 = 0, delta, i, c, v;\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v != null && !isNaN(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n      M2 = M2 + delta * (v - mean);\n    }\n  }\n  M2 = M2 / (c - 1);\n  return M2;\n};\n\n// Compute the sample standard deviation of an array of numbers.\nstats.stdev = function(values, f) {\n  return Math.sqrt(stats.variance(values, f));\n};\n\n// Compute the Pearson mode skewness ((median-mean)/stdev) of an array of numbers.\nstats.modeskew = function(values, f) {\n  var avg = stats.mean(values, f),\n      med = stats.median(values, f),\n      std = stats.stdev(values, f);\n  return std === 0 ? 0 : (avg - med) / std;\n};\n\n// Find the minimum and maximum of an array of values.\nstats.extent = function(values, f) {\n  var a, b, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) { a = b = v; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) {\n      if (v < a) a = v;\n      if (v > b) b = v;\n    }\n  }\n  return [a, b];\n};\n\n// Find the integer indices of the minimum and maximum values.\nstats.extent.index = function(values, f) {\n  var a, b, x, y, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) { a = b = v; x = y = i; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) {\n      if (v < a) { a = v; x = i; }\n      if (v > b) { b = v; y = i; }\n    }\n  }\n  return [x, y];\n};\n\n// Compute the dot product of two arrays of numbers.\nstats.dot = function(values, a, b) {\n  var sum = 0, i, v;\n  if (!b) {\n    if (values.length !== a.length) {\n      throw Error(\"Array lengths must match.\");\n    }\n    for (i=0; i<values.length; ++i) {\n      v = values[i] * a[i];\n      if (!isNaN(v)) sum += v;\n    }\n  } else {\n    for (i=0; i<values.length; ++i) {\n      v = a(values[i]) * b(values[i]);\n      if (!isNaN(v)) sum += v;\n    }\n  }\n  return sum;\n};\n\n// Compute ascending rank scores for an array of values.\n// Ties are assigned their collective mean rank.\nstats.rank = function(values, f) {\n  var a = values.map(function(v, i) {\n      return {\n        idx: i,\n        val: (f ? f(v) : v)\n      };\n    })\n    .sort(util.comparator(\"val\"));\n\n  var n = values.length,\n      r = Array(n),\n      tie = -1, p = {}, i, v, mu;\n\n  for (i=0; i<n; ++i) {\n    v = a[i].val;\n    if (tie < 0 && p === v) {\n      tie = i - 1;\n    } else if (tie > -1 && p !== v) {\n      mu = 1 + (i-1 + tie) / 2;\n      for (; tie<i; ++tie) r[a[tie].idx] = mu;\n      tie = -1;\n    }\n    r[a[i].idx] = i + 1;\n    p = v;\n  }\n\n  if (tie > -1) {\n    mu = 1 + (n-1 + tie) / 2;\n    for (; tie<n; ++tie) r[a[tie].idx] = mu;\n  }\n\n  return r;\n};\n\n// Compute the sample Pearson product-moment correlation of two arrays of numbers.\nstats.cor = function(values, a, b) {\n  var fn = b;\n  b = fn ? values.map(b) : a,\n  a = fn ? values.map(a) : values;\n\n  var dot = stats.dot(a, b),\n      mua = stats.mean(a),\n      mub = stats.mean(b),\n      sda = stats.stdev(a),\n      sdb = stats.stdev(b),\n      n = values.length;\n\n  return (dot - n*mua*mub) / ((n-1) * sda * sdb);\n};\n\n// Compute the Spearman rank correlation of two arrays of values.\nstats.cor.rank = function(values, a, b) {\n  var ra = b ? stats.rank(values, a) : stats.rank(values),\n      rb = b ? stats.rank(values, b) : stats.rank(a),\n      n = values.length, i, s, d;\n\n  for (i=0, s=0; i<n; ++i) {\n    d = ra[i] - rb[i];\n    s += d * d;\n  }\n\n  return 1 - 6*s / (n * (n*n-1));\n};\n\n// Compute the distance correlation of two arrays of numbers.\n// http://en.wikipedia.org/wiki/Distance_correlation\nstats.cor.dist = function(values, a, b) {\n  var X = b ? values.map(a) : values,\n      Y = b ? values.map(b) : a;\n\n  var A = stats.dist.mat(X),\n      B = stats.dist.mat(Y),\n      n = A.length,\n      i, aa, bb, ab;\n\n  for (i=0, aa=0, bb=0, ab=0; i<n; ++i) {\n    aa += A[i]*A[i];\n    bb += B[i]*B[i];\n    ab += A[i]*B[i];\n  }\n\n  return Math.sqrt(ab / Math.sqrt(aa*bb));\n};\n\n// Compute the vector distance between two arrays of numbers.\n// Default is Euclidean (exp=2) distance, configurable via exp argument.\nstats.dist = function(values, a, b, exp) {\n  var f = util.isFunction(b),\n      X = values,\n      Y = f ? values : a,\n      e = f ? exp : b,\n      n = values.length, s = 0, d, i;\n\n  if (e === 2 || e === undefined) {\n    for (i=0; i<n; ++i) {\n      d = f ? (a(X[i])-b(Y[i])) : (X[i]-Y[i]);\n      s += d*d;\n    }\n    return Math.sqrt(s);\n  } else {\n    for (i=0; i<n; ++i) {\n      d = Math.abs(f ? (a(X[i])-b(Y[i])) : (X[i]-Y[i]));\n      s += Math.pow(d, e);\n    }\n    return Math.pow(s, 1/e);\n  }\n};\n\n// Construct a mean-centered distance matrix for an array of numbers.\nstats.dist.mat = function(X) {\n  var n = X.length,\n      m = n*n,\n      A = Array(m),\n      R = gen.zeros(n),\n      M = 0, v, i, j;\n\n  for (i=0; i<n; ++i) {\n    A[i*n+i] = 0;\n    for (j=i+1; j<n; ++j) {\n      A[i*n+j] = (v = Math.abs(X[i] - X[j]));\n      A[j*n+i] = v;\n      R[i] += v;\n      R[j] += v;\n    }\n  }\n\n  for (i=0; i<n; ++i) {\n    M += R[i];\n    R[i] /= n;\n  }\n  M /= m;\n\n  for (i=0; i<n; ++i) {\n    for (j=i; j<n; ++j) {\n      A[i*n+j] += M - R[i] - R[j];\n      A[j*n+i] = A[i*n+j];\n    }\n  }\n\n  return A;\n};\n\n// Compute the Shannon entropy (log base 2) of an array of counts.\nstats.entropy = function(counts, f) {\n  var i, p, s = 0, H = 0, N = counts.length;\n  for (i=0; i<N; ++i) {\n    s += (f ? f(counts[i]) : counts[i]);\n  }\n  if (s === 0) return 0;\n  for (i=0; i<N; ++i) {\n    p = (f ? f(counts[i]) : counts[i]) / s;\n    if (p > 0) H += p * Math.log(p) / Math.LN2;\n  }\n  return -H;\n};\n\n// Compute the normalized Shannon entropy (log base 2) of an array of counts.\nstats.entropy.normalized = function(counts, f) {\n  var H = stats.entropy(counts, f);\n  return H===0 ? 0 : H * Math.LN2 / Math.log(counts.length);\n};\n\n// Compute the mutual information between two discrete variables.\n// http://en.wikipedia.org/wiki/Mutual_information\nstats.entropy.mutual = function(values, a, b, counts) {\n  var x = counts ? values.map(a) : values,\n      y = counts ? values.map(b) : a,\n      z = counts ? values.map(counts) : b;\n\n  var px = {},\n\t    py = {},\n\t    i, xx, yy, zz, s = 0, t, N = z.length, p, I = 0;\n\n\tfor (i=0; i<N; ++i) {\n\t  px[x[i]] = 0;\n\t  py[y[i]] = 0;\n  }\n\n\tfor (i=0; i<N; ++i) {\n\t\tpx[x[i]] += z[i];\n\t\tpy[y[i]] += z[i];\n\t\ts += z[i];\n\t}\n\n\tt = 1 / (s * Math.LN2);\n\tfor (i=0; i<N; ++i) {\n\t\tif (z[i] === 0) continue;\n\t\tp = (s * z[i]) / (px[x[i]] * py[y[i]]);\n\t\tI += z[i] * t * Math.log(p);\n\t}\n\n\treturn I;\n};\n\n// Compute a profile of summary statistics for a variable.\nstats.profile = function(values, f) {\n  var p = {},\n      mean = 0,\n      count = 0,\n      distinct = 0,\n      min = null,\n      max = null,\n      M2 = 0,\n      vals = [],\n      u = {}, delta, sd, i, v, x, half, h, h2;\n\n  // compute summary stats\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n\n    // update unique values\n    u[v] = (v in u) ? u[v] + 1 : (distinct += 1, 1);\n\n    if (util.isNotNull(v)) {\n      // update stats\n      x = (typeof v === 'string') ? v.length : v;\n      if (min===null || x < min) min = x;\n      if (max===null || x > max) max = x;\n\n      delta = x - mean;\n      mean = mean + delta / (++count);\n      M2 = M2 + delta * (x - mean);\n      vals.push(x);\n    }\n  }\n  M2 = M2 / (count - 1);\n  sd = Math.sqrt(M2);\n\n  // sort values for median and iqr\n  vals.sort(util.cmp);\n\n  return {\n    unique:   u,\n    count:    count,\n    nulls:    values.length - count,\n    distinct: distinct,\n    min:      min,\n    max:      max,\n    mean:     mean,\n    stdev:    sd,\n    median:   (v = stats.quantile(vals, 0.5)),\n    modeskew: sd === 0 ? 0 : (mean - v) / sd,\n    iqr:      [stats.quantile(vals, 0.25), stats.quantile(vals, 0.75)]\n  };\n};\n\nmodule.exports = stats;\n},{\"./generate\":6,\"./util\":9}],8:[function(require,module,exports){\nvar util = require('./util');\nvar stats = require('./stats');\n\n// Compute profiles for all variables in a data set.\nmodule.exports = function(data, fields) {\n  if (data == null || data.length === 0) return null;\n  fields = fields || util.keys(data[0]);\n\n  var profiles = fields.map(function(f) {\n    var p = stats.profile(data, util.accessor(f));\n    return (p.field = f, p);\n  });\n  \n  profiles.toString = printSummary;\n  return profiles;\n};\n\nfunction printSummary() {\n  var profiles = this;\n  var str = [];\n  profiles.forEach(function(p) {\n    str.push(\"----- Field: '\" + p.field + \"' -----\");\n    if (typeof p.min === 'string' || p.distinct < 10) {\n      str.push(printCategoricalProfile(p));\n    } else {\n      str.push(printQuantitativeProfile(p));\n    }\n    str.push(\"\");\n  });\n  return str.join(\"\\n\");\n}\n\nfunction printQuantitativeProfile(p) {\n  return [\n    \"distinct: \" + p.distinct,\n    \"nulls:    \" + p.nulls,\n    \"min:      \" + p.min,\n    \"max:      \" + p.max,\n    \"median:   \" + p.median,\n    \"mean:     \" + p.mean,\n    \"stdev:    \" + p.stdev,\n    \"modeskew: \" + p.modeskew\n  ].join(\"\\n\");\n}\n\nfunction printCategoricalProfile(p) {\n  var list = [\n    \"distinct: \" + p.distinct,\n    \"nulls:    \" + p.nulls,\n    \"top values: \"\n  ];\n  var u = p.unique;\n  var top = util.keys(u)\n    .sort(function(a,b) { return u[b] - u[a]; })\n    .slice(0, 6)\n    .map(function(v) { return \" '\" + v + \"' (\" + u[v] + \")\"; });\n  return list.concat(top).join(\"\\n\");\n}\n},{\"./stats\":7,\"./util\":9}],9:[function(require,module,exports){\n(function (process){\nvar Buffer = require('buffer').Buffer;\nvar u = module.exports = {};\n\n// where are we?\n\nu.isNode = typeof process !== 'undefined'\n        && typeof process.stderr !== 'undefined';\n\n// type checking functions\n\nvar toString = Object.prototype.toString;\n\nu.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nu.isFunction = function(obj) {\n  return toString.call(obj) == '[object Function]';\n};\n\nu.isString = function(obj) {\n  return toString.call(obj) == '[object String]';\n};\n\nu.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nu.isNumber = function(obj) {\n  return !isNaN(parseFloat(obj)) && isFinite(obj);\n};\n\nu.isBoolean = function(obj) {\n  return toString.call(obj) == '[object Boolean]';\n};\n\nu.isDate = function(obj) {\n  return toString.call(obj) == '[object Date]';\n};\n\nu.isNotNull = function(obj) {\n  return obj != null && (typeof obj !== 'number' ? true : !isNaN(obj));\n};\n\nu.isBuffer = (Buffer && Buffer.isBuffer) || u.false;\n\n// type coercion functions\n\nu.number = function(s) { return s == null ? null : +s; };\n\nu.boolean = function(s) { return s == null ? null : s==='false' ? false : !!s; };\n\nu.date = function(s) { return s == null ? null : Date.parse(s); }\n\nu.array = function(x) { return x != null ? (u.isArray(x) ? x : [x]) : []; };\n\nu.str = function(x) {\n  return u.isArray(x) ? \"[\" + x.map(u.str) + \"]\"\n    : u.isObject(x) ? JSON.stringify(x)\n    : u.isString(x) ? (\"'\"+util_escape_str(x)+\"'\") : x;\n};\n\nvar escape_str_re = /(^|[^\\\\])'/g;\n\nfunction util_escape_str(x) {\n  return x.replace(escape_str_re, \"$1\\\\'\");\n}\n\n// utility functions\n\nu.identity = function(x) { return x; };\n\nu.true = function() { return true; };\n\nu.false = function() { return false; };\n\nu.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nu.equal = function(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nu.extend = function(obj) {\n  for (var x, name, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (name in x) { obj[name] = x[name]; }\n  }\n  return obj;\n};\n\nu.keys = function(x) {\n  var keys = [], k;\n  for (k in x) keys.push(k);\n  return keys;\n};\n\nu.vals = function(x) {\n  var vals = [], k;\n  for (k in x) vals.push(x[k]);\n  return vals;\n};\n\nu.toMap = function(list) {\n  return list.reduce(function(obj, x) {\n    return (obj[x] = 1, obj);\n  }, {});\n};\n\nu.keystr = function(values) {\n  // use to ensure consistent key generation across modules\n  return values.join(\"|\");\n};\n\n// data access functions\n\nu.field = function(f) {\n  return f.split(\"\\\\.\")\n    .map(function(d) { return d.split(\".\"); })\n    .reduce(function(a, b) {\n      if (a.length) { a[a.length-1] += \".\" + b.shift(); }\n      a.push.apply(a, b);\n      return a;\n    }, []);\n};\n\nu.accessor = function(f) {\n  var s;\n  return (u.isFunction(f) || f==null)\n    ? f : u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x) { return s.reduce(function(x,f) {\n          return x[f];\n        }, x);\n      }\n    : function(x) { return x[f]; };\n};\n\nu.mutator = function(f) {\n  var s;\n  return u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x, v) {\n        for (var i=0; i<s.length-1; ++i) x = x[s[i]];\n        x[s[i]] = v;\n      }\n    : function(x, v) { x[f] = v; };\n};\n\n\n// comparison / sorting functions\n\nu.comparator = function(sort) {\n  var sign = [];\n  if (sort === undefined) sort = [];\n  sort = u.array(sort).map(function(f) {\n    var s = 1;\n    if      (f[0] === \"-\") { s = -1; f = f.slice(1); }\n    else if (f[0] === \"+\") { s = +1; f = f.slice(1); }\n    sign.push(s);\n    return u.accessor(f);\n  });\n  return function(a,b) {\n    var i, n, f, x, y;\n    for (i=0, n=sort.length; i<n; ++i) {\n      f = sort[i]; x = f(a); y = f(b);\n      if (x < y) return -1 * sign[i];\n      if (x > y) return sign[i];\n    }\n    return 0;\n  };\n};\n\nu.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nu.numcmp = function(a, b) { return a - b; };\n\nu.stablesort = function(array, sortBy, keyFn) {\n  var indices = array.reduce(function(idx, v, i) {\n    return (idx[keyFn(v)] = i, idx);\n  }, {});\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n        sb = sortBy(b);\n    return sa < sb ? -1 : sa > sb ? 1\n         : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n\n  return array;\n};\n\n\n// string functions\n\n// ES6 compatibility per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n// We could have used the polyfill code, but lets wait until ES6 becomes a standard first\nu.startsWith = String.prototype.startsWith\n  ? function(string, searchString) {\n    return string.startsWith(searchString);\n  }\n  : function(string, searchString) {\n    return string.lastIndexOf(searchString, 0) === 0;\n  };\n\nu.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis !== undefined ? String(ellipsis) : \"…\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis\n        + (word ? truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n}).call(this,require('_process'))\n\n},{\"_process\":3,\"buffer\":2}],10:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (vlfield.isCount(this._enc[et])) {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n   // returns whether the encoding has values embedded\n  proto.hasValues = function() {\n    var vals = this.data('values');\n    return vals && vals.length;\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig, excludeData) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    if (!excludeData) {\n      spec.data = util.duplicate(this._data);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].nulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n\n},{\"./compile/time\":27,\"./consts\":28,\"./enc\":30,\"./field\":31,\"./globals\":32,\"./schema/schema\":33,\"./util\":35}],11:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n\n},{\"../globals\":32,\"../util\":35}],12:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid'], {\n       stroke: {\n         value: encoding.config('gridColor')\n       },\n       opacity: {\n         value: encoding.config('gridOpacity')\n       }\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n\n},{\"../globals\":32,\"../util\":35,\"./time\":27}],13:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n\n},{\"../globals\":32,\"../util\":35}],14:[function(require,module,exports){\n'use strict';\n\nvar summary = module.exports = require('datalib/src/summary');\n\nvar globals = require('../globals');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale');\n\ncompile.aggregate = require('./aggregate');\ncompile.bin = require('./bin');\ncompile.facet = require('./facet');\ncompile.group = require('./group');\ncompile.layout = require('./layout');\ncompile.sort = require('./sort');\ncompile.stack = require('./stack');\ncompile.style = require('./style');\ncompile.subfacet = require('./subfacet');\ncompile.template = require('./template');\ncompile.time = require('./time');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  // no need to pass stats if you pass in the data\n  if (!stats && encoding.hasValues()) {\n    stats = summary(encoding.data('values')).reduce(function(s, p) {\n      s[p.field] = p;\n      return s;\n    }, {});\n  }\n\n  var layout = compile.layout(encoding, stats),\n    style = compile.style(encoding, stats),\n    spec = compile.template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = compile.sort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  compile.bin(spec.data[1], encoding);\n\n  var lineType = marks[encoding.marktype()].line;\n\n  spec = compile.time(spec, encoding);\n\n  // handle subfacets\n  var aggResult = compile.aggregate(spec, encoding),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && compile.stack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    compile.subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = compile.facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n\n},{\"../Encoding\":10,\"../globals\":32,\"./aggregate\":11,\"./axis\":12,\"./bin\":13,\"./facet\":15,\"./filter\":16,\"./group\":17,\"./layout\":18,\"./legend\":19,\"./marks\":20,\"./scale\":21,\"./sort\":22,\"./stack\":23,\"./style\":24,\"./subfacet\":25,\"./template\":26,\"./time\":27,\"datalib/src/summary\":8}],15:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n\n},{\"../globals\":32,\"../util\":35,\"./axis\":12,\"./group\":17,\"./scale\":21}],16:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n\n},{\"../globals\":32}],17:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction getMaxLength(encoding, stats, et) {\n  // FIXME determine constant for Q and T in a nicer way\n  return encoding.isType(et, Q) ? 20 :\n    encoding.isType(et, T) ? 20 :\n    stats[encoding.fieldName(et)].max;\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength =  getMaxLength(encoding, stats, x);\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(getMaxLength(encoding, stats, x), 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n\n},{\"../field\":31,\"../globals\":32,\"../schema/schema\":33,\"../util\":35,\"./time\":27}],19:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n\n},{\"../globals\":32,\"./time\":27}],20:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n\n},{\"../globals\":32,\"../util\":35,\"./scale\":21}],21:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n\n},{\"../globals\":32,\"../util\":35,\"./time\":27}],22:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n\n},{\"../globals\":32}],23:[function(require,module,exports){\n\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n\n},{\"../globals\":32,\"../util\":35,\"./marks\":20}],24:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n\n},{\"../Encoding\":10,\"../field\":31,\"../globals\":32,\"../util\":35}],25:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n\n},{\"../globals\":32,\"./group\":17}],26:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data'),\n  vlfield = require('../field');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) {\n\n  var data = {name: RAW, format: {}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = encoding.data('url'),\n    dataType = encoding.data('formatType'),\n    values = encoding.data('values');\n\n  if (encoding.hasValues()) {\n    data.values = values;\n  } else {\n    data.url = dataUrl;\n    data.format.type = dataType;\n  }\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (vlfield.isCount(field)) {\n        name = 'count';\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"../data\":29,\"../field\":31,\"../globals\":32,\"./group\":17}],27:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.distinct -\n        (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n\n},{\"../globals\":32,\"../util\":35}],28:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n\n},{\"./globals\":32}],29:[function(require,module,exports){\n'use strict';\n\nvar vldata = module.exports = {},\n  vlfield = require('./field'),\n  util = require('./util');\n\n/** Mapping from datalib's inferred type to vegalite's type */\nvldata.types = {\n  'boolean': 'O',\n  'number': 'Q',\n  'integer': 'Q',\n  'date': 'T',\n  'string': 'O'\n};\n\n\n},{\"./field\":31,\"./util\":35}],30:[function(require,module,exports){\n// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};\n},{\"./compile/time\":27,\"./consts\":28,\"./field\":31,\"./schema/schema\":33,\"./util\":35}],31:[function(require,module,exports){\n'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].distinct;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n\n  var stat = stats[field.name];\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stat, field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  return stat.distinct -\n    (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n};\n\n},{\"./compile/time\":27,\"./consts\":28,\"./schema/schema\":33,\"./util\":35}],32:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],33:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    values: {\n      type: 'array',\n      description: 'Pass array of objects instead of a url to a file.',\n      items: {\n        type: 'object',\n        additionalProperties: true\n      }\n    }\n  }\n};\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#000'\n    },\n    gridOpacity: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.08\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n\n},{\"../util\":35,\"./schemautil\":34}],34:[function(require,module,exports){\n'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n},{\"../util\":35}],35:[function(require,module,exports){\n'use strict';\n\nvar util = module.exports = require('datalib/src/util');\n\nutil.extend(util, require('datalib/src/generate'));\nutil.bin = require('datalib/src/bin');\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bin({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n\n},{\"datalib/src/bin\":4,\"datalib/src/generate\":6,\"datalib/src/util\":9}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var util = require('./util');\nvar units = require('./date-units');\nvar EPSILON = 1e-15;\n\nfunction bin(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 15,\n      base = opt.base || 10,\n      logb = Math.log(base),\n      div = opt.div || [5, 2],      \n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step, logb, level, minstep, precision, v, i, eps;\n\n  if (opt.step != null) {\n    // if step size is explicitly given, use that\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n      opt.steps.length - 1,\n      bisect(opt.steps, span/maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = opt.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n    \n    // increase step size if too many bins\n    do { step *= base; } while (Math.ceil(span/step) > maxb);\n\n    // decrease step size if allowed\n    for (i=0; i<div.length; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step,\n    unit:  {precision: precision},\n    value: value,\n    index: index\n  };\n};\n\nfunction bisect(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n};\n\nfunction value(v) {\n  return this.step * Math.floor(v / this.step + EPSILON);\n}\n\nfunction index(v) {\n  return Math.floor((v - this.start) / this.step + EPSILON);\n}\n\nfunction date_value(v) {\n  return this.unit.date(value.call(this, v));\n}\n\nfunction date_index(v) {\n  return index.call(this, this.unit.unit(v));\n}\n\nbin.date = function(opt) {\n  opt = opt || {};\n\n  // find time step, then bin\n  var dmin = opt.min,\n      dmax = opt.max,\n      maxb = opt.maxbins || 20,\n      minb = opt.minbins || 4,\n      span = (+dmax) - (+dmin);\n      unit = opt.unit ? units[opt.unit] : units.find(span, minb, maxb),\n      bins = bin({\n        min:     unit.min != null ? unit.min : unit.unit(dmin),\n        max:     unit.max != null ? unit.max : unit.unit(dmax),\n        maxbins: maxb,\n        minstep: unit.minstep,\n        steps:   unit.step\n      });\n\n  bins.unit = unit;\n  bins.index = date_index;\n  if (!opt.raw) bins.value = date_value;\n  return bins;\n};\n\nmodule.exports = bin;\n","var util = require('./util');\n\nvar STEPS = [\n  [31536e6, 5],  // 1-year\n  [7776e6, 4],   // 3-month\n  [2592e6, 4],   // 1-month\n  [12096e5, 3],  // 2-week\n  [6048e5, 3],   // 1-week\n  [1728e5, 3],   // 2-day\n  [864e5, 3],    // 1-day\n  [432e5, 2],    // 12-hour\n  [216e5, 2],    // 6-hour\n  [108e5, 2],    // 3-hour\n  [36e5, 2],     // 1-hour\n  [18e5, 1],     // 30-minute\n  [9e5, 1],      // 15-minute\n  [3e5, 1],      // 5-minute\n  [6e4, 1],      // 1-minute\n  [3e4, 0],      // 30-second\n  [15e3, 0],     // 15-second\n  [5e3, 0],      // 5-second\n  [1e3, 0]       // 1-second\n];\n\nvar entries = [\n  {\n    type: \"second\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M:%S.%L\",\n    date: function(d) {\n      return new Date(d * 1e3);\n    },\n    unit: function(d) {\n      return (+d / 1e3);\n    }\n  },\n  {\n    type: \"minute\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M\",\n    date: function(d) {\n      return new Date(d * 6e4);\n    },\n    unit: function(d) {\n      return ~~(+d / 6e4);\n    }\n  },\n  {\n    type: \"hour\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:00\",\n    date: function(d) {\n      return new Date(d * 36e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 36e5);\n    }\n  },\n  {\n    type: \"day\",\n    minstep: 1,\n    step: [1, 7],\n    format: \"%Y %b %-d\",\n    date: function(d) {\n      return new Date(d * 864e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 864e5);\n    }\n  },\n  {\n    type: \"month\",\n    minstep: 1,\n    step: [1, 3, 6],\n    format: \"%b %Y\",\n    date: function(d) {\n      return new Date(Date.UTC(~~(d / 12), d % 12, 1));\n    },\n    unit: function(d) {\n      if (util.isNumber(d)) d = new Date(d);\n      return 12 * d.getUTCFullYear() + d.getUTCMonth();\n    }\n  },\n  {\n    type: \"year\",\n    minstep: 1,\n    format: \"%Y\",\n    date: function(d) {\n      return new Date(Date.UTC(d, 0, 1));\n    },\n    unit: function(d) {\n      return (util.isNumber(d) ? new Date(d) : d).getUTCFullYear();\n    }\n  }\n];\n\nvar minuteOfHour = {\n  type: \"minuteOfHour\",\n  min: 0,\n  max: 59,\n  minstep: 1,\n  format: \"%M\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMinutes();\n  }\n};\n\nvar hourOfDay = {\n  type: \"hourOfDay\",\n  min: 0,\n  max: 23,\n  minstep: 1,\n  format: \"%H\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCHours();\n  }\n};\n\nvar dayOfWeek = {\n  type: \"dayOfWeek\",\n  min: 0,\n  max: 6,\n  step: [1],\n  format: \"%a\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 4 + d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDay();\n  }\n};\n\nvar dayOfMonth = {\n  type: \"dayOfMonth\",\n  min: 1,\n  max: 31,\n  step: [1],\n  format: \"%-d\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDate();\n  }\n};\n\nvar monthOfYear = {\n  type: \"monthOfYear\",\n  min: 0,\n  max: 11,\n  step: [1],\n  format: \"%b\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, d % 12, 1));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMonth();\n  }\n};\n\nvar units = {\n  \"second\":       entries[0],\n  \"minute\":       entries[1],\n  \"hour\":         entries[2],\n  \"day\":          entries[3],\n  \"month\":        entries[4],\n  \"year\":         entries[5],\n  \"minuteOfHour\": minuteOfHour,\n  \"hourOfDay\":    hourOfDay,\n  \"dayOfWeek\":    dayOfWeek,\n  \"dayOfMonth\":   dayOfMonth,\n  \"monthOfYear\":  monthOfYear,\n  \"timesteps\":    entries\n};\n\nunits.find = function(span, minb, maxb) {\n  var i, len, bins, step = STEPS[0];\n\n  for (i = 1, len = STEPS.length; i < len; ++i) {\n    step = STEPS[i];\n    if (span > step[0]) {\n      bins = span / step[0];\n      if (bins > maxb) {\n        return entries[STEPS[i - 1][1]];\n      }\n      if (bins >= minb) {\n        return entries[step[1]];\n      }\n    }\n  }\n  return entries[STEPS[STEPS.length - 1][1]];\n};\n\nmodule.exports = units;\n","var gen = module.exports = {};\n\ngen.repeat = function(val, n) {\n  var a = Array(n), i;\n  for (i=0; i<n; ++i) a[i] = val;\n  return a;\n};\n\ngen.zeros = function(n) {\n  return gen.repeat(0, n);\n};\n\ngen.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('Infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\ngen.random = {};\n\ngen.random.uniform = function(min, max) {\n  if (max === undefined) {\n\t\tmax = min;\n\t\tmin = 0;\n\t}\n\tvar d = max - min;\n\tvar f = function() {\n\t\treturn min + d * Math.random();\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.integer = function(a, b) {\n\tif (b === undefined) {\n\t\tb = a;\n\t\ta = 0;\n\t}\n  var d = b - a;\n\tvar f = function() {\n\t\treturn a + Math.floor(d * Math.random());\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.normal = function(mean, stdev) {\n\tmean = mean || 0;\n\tstdev = stdev || 1;\n\tvar next = undefined;\n\tvar f = function() {\n\t\tvar x = 0, y = 0, rds, c;\n\t\tif (next !== undefined) {\n\t\t\tx = next;\n\t\t\tnext = undefined;\n\t\t\treturn x;\n\t\t}\n\t\tdo {\n\t\t\tx = Math.random()*2-1;\n\t\t\ty = Math.random()*2-1;\n\t\t\trds = x*x + y*y;\n\t\t} while (rds == 0 || rds > 1);\n\t\tc = Math.sqrt(-2*Math.log(rds)/rds); // Box-Muller transform\n\t\tnext = mean + y*c*stdev;\n\t\treturn mean + x*c*stdev;\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};","var util = require('./util');\nvar gen = require('./generate');\nvar stats = {};\n\n// Collect unique values and associated counts.\n// Output: an array of unique values, in observed order\n// The array includes an additional 'counts' property,\n// which is a hash from unique values to occurrence counts.\nstats.unique = function(values, f, results) {\n  if (!util.isArray(values) || values.length===0) return [];\n  results = results || [];\n  var u = {}, v, i;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) {\n      u[v] += 1;\n    } else {\n      u[v] = 1;\n      results.push(v);\n    }\n  }\n  results.counts = u;\n  return results;\n};\n\n// Count the number of non-null values.\nstats.count = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var v, i, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v != null) count += 1;\n  }\n  return count;\n};\n\n// Count the number of distinct values.\nstats.count.distinct = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var u = {}, v, i, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) continue;\n    u[v] = 1;\n    count += 1;\n  }\n  return count;\n};\n\n// Count the number of null or undefined values.\nstats.count.nulls = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var v, i, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v == null) count += 1;\n  }\n  return count;\n};\n\n// Compute the median of an array of numbers.\nstats.median = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  if (f) values = values.map(f);\n  values = values.filter(util.isNotNull).sort(util.cmp);\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\n// Compute the quantile of a sorted array of numbers.\n// Adapted from the D3.js implementation.\nstats.quantile = function(values, f, p) {\n  if (p === undefined) { p = f; f = util.identity; }\n  var H = (values.length - 1) * p + 1,\n      h = Math.floor(H),\n      v = +f(values[h - 1]),\n      e = H - h;\n  return e ? v + e * (f(values[h]) - v) : v;\n};\n\n// Compute the mean (average) of an array of numbers.\nstats.mean = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var mean = 0, delta, i, c, v;\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v != null && !isNaN(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n    }\n  }\n  return mean;\n};\n\n// Compute the sample variance of an array of numbers.\nstats.variance = function(values, f) {\n  if (!util.isArray(values) || values.length===0) return 0;\n  var mean = 0, M2 = 0, delta, i, c, v;\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v != null && !isNaN(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n      M2 = M2 + delta * (v - mean);\n    }\n  }\n  M2 = M2 / (c - 1);\n  return M2;\n};\n\n// Compute the sample standard deviation of an array of numbers.\nstats.stdev = function(values, f) {\n  return Math.sqrt(stats.variance(values, f));\n};\n\n// Compute the Pearson mode skewness ((median-mean)/stdev) of an array of numbers.\nstats.modeskew = function(values, f) {\n  var avg = stats.mean(values, f),\n      med = stats.median(values, f),\n      std = stats.stdev(values, f);\n  return std === 0 ? 0 : (avg - med) / std;\n};\n\n// Find the minimum and maximum of an array of values.\nstats.extent = function(values, f) {\n  var a, b, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) { a = b = v; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) {\n      if (v < a) a = v;\n      if (v > b) b = v;\n    }\n  }\n  return [a, b];\n};\n\n// Find the integer indices of the minimum and maximum values.\nstats.extent.index = function(values, f) {\n  var a, b, x, y, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) { a = b = v; x = y = i; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    v = (typeof v === 'string') ? v.length : v;\n    if (util.isNotNull(v)) {\n      if (v < a) { a = v; x = i; }\n      if (v > b) { b = v; y = i; }\n    }\n  }\n  return [x, y];\n};\n\n// Compute the dot product of two arrays of numbers.\nstats.dot = function(values, a, b) {\n  var sum = 0, i, v;\n  if (!b) {\n    if (values.length !== a.length) {\n      throw Error(\"Array lengths must match.\");\n    }\n    for (i=0; i<values.length; ++i) {\n      v = values[i] * a[i];\n      if (!isNaN(v)) sum += v;\n    }\n  } else {\n    for (i=0; i<values.length; ++i) {\n      v = a(values[i]) * b(values[i]);\n      if (!isNaN(v)) sum += v;\n    }\n  }\n  return sum;\n};\n\n// Compute ascending rank scores for an array of values.\n// Ties are assigned their collective mean rank.\nstats.rank = function(values, f) {\n  var a = values.map(function(v, i) {\n      return {\n        idx: i,\n        val: (f ? f(v) : v)\n      };\n    })\n    .sort(util.comparator(\"val\"));\n\n  var n = values.length,\n      r = Array(n),\n      tie = -1, p = {}, i, v, mu;\n\n  for (i=0; i<n; ++i) {\n    v = a[i].val;\n    if (tie < 0 && p === v) {\n      tie = i - 1;\n    } else if (tie > -1 && p !== v) {\n      mu = 1 + (i-1 + tie) / 2;\n      for (; tie<i; ++tie) r[a[tie].idx] = mu;\n      tie = -1;\n    }\n    r[a[i].idx] = i + 1;\n    p = v;\n  }\n\n  if (tie > -1) {\n    mu = 1 + (n-1 + tie) / 2;\n    for (; tie<n; ++tie) r[a[tie].idx] = mu;\n  }\n\n  return r;\n};\n\n// Compute the sample Pearson product-moment correlation of two arrays of numbers.\nstats.cor = function(values, a, b) {\n  var fn = b;\n  b = fn ? values.map(b) : a,\n  a = fn ? values.map(a) : values;\n\n  var dot = stats.dot(a, b),\n      mua = stats.mean(a),\n      mub = stats.mean(b),\n      sda = stats.stdev(a),\n      sdb = stats.stdev(b),\n      n = values.length;\n\n  return (dot - n*mua*mub) / ((n-1) * sda * sdb);\n};\n\n// Compute the Spearman rank correlation of two arrays of values.\nstats.cor.rank = function(values, a, b) {\n  var ra = b ? stats.rank(values, a) : stats.rank(values),\n      rb = b ? stats.rank(values, b) : stats.rank(a),\n      n = values.length, i, s, d;\n\n  for (i=0, s=0; i<n; ++i) {\n    d = ra[i] - rb[i];\n    s += d * d;\n  }\n\n  return 1 - 6*s / (n * (n*n-1));\n};\n\n// Compute the distance correlation of two arrays of numbers.\n// http://en.wikipedia.org/wiki/Distance_correlation\nstats.cor.dist = function(values, a, b) {\n  var X = b ? values.map(a) : values,\n      Y = b ? values.map(b) : a;\n\n  var A = stats.dist.mat(X),\n      B = stats.dist.mat(Y),\n      n = A.length,\n      i, aa, bb, ab;\n\n  for (i=0, aa=0, bb=0, ab=0; i<n; ++i) {\n    aa += A[i]*A[i];\n    bb += B[i]*B[i];\n    ab += A[i]*B[i];\n  }\n\n  return Math.sqrt(ab / Math.sqrt(aa*bb));\n};\n\n// Compute the vector distance between two arrays of numbers.\n// Default is Euclidean (exp=2) distance, configurable via exp argument.\nstats.dist = function(values, a, b, exp) {\n  var f = util.isFunction(b),\n      X = values,\n      Y = f ? values : a,\n      e = f ? exp : b,\n      n = values.length, s = 0, d, i;\n\n  if (e === 2 || e === undefined) {\n    for (i=0; i<n; ++i) {\n      d = f ? (a(X[i])-b(Y[i])) : (X[i]-Y[i]);\n      s += d*d;\n    }\n    return Math.sqrt(s);\n  } else {\n    for (i=0; i<n; ++i) {\n      d = Math.abs(f ? (a(X[i])-b(Y[i])) : (X[i]-Y[i]));\n      s += Math.pow(d, e);\n    }\n    return Math.pow(s, 1/e);\n  }\n};\n\n// Construct a mean-centered distance matrix for an array of numbers.\nstats.dist.mat = function(X) {\n  var n = X.length,\n      m = n*n,\n      A = Array(m),\n      R = gen.zeros(n),\n      M = 0, v, i, j;\n\n  for (i=0; i<n; ++i) {\n    A[i*n+i] = 0;\n    for (j=i+1; j<n; ++j) {\n      A[i*n+j] = (v = Math.abs(X[i] - X[j]));\n      A[j*n+i] = v;\n      R[i] += v;\n      R[j] += v;\n    }\n  }\n\n  for (i=0; i<n; ++i) {\n    M += R[i];\n    R[i] /= n;\n  }\n  M /= m;\n\n  for (i=0; i<n; ++i) {\n    for (j=i; j<n; ++j) {\n      A[i*n+j] += M - R[i] - R[j];\n      A[j*n+i] = A[i*n+j];\n    }\n  }\n\n  return A;\n};\n\n// Compute the Shannon entropy (log base 2) of an array of counts.\nstats.entropy = function(counts, f) {\n  var i, p, s = 0, H = 0, N = counts.length;\n  for (i=0; i<N; ++i) {\n    s += (f ? f(counts[i]) : counts[i]);\n  }\n  if (s === 0) return 0;\n  for (i=0; i<N; ++i) {\n    p = (f ? f(counts[i]) : counts[i]) / s;\n    if (p > 0) H += p * Math.log(p) / Math.LN2;\n  }\n  return -H;\n};\n\n// Compute the normalized Shannon entropy (log base 2) of an array of counts.\nstats.entropy.normalized = function(counts, f) {\n  var H = stats.entropy(counts, f);\n  return H===0 ? 0 : H * Math.LN2 / Math.log(counts.length);\n};\n\n// Compute the mutual information between two discrete variables.\n// http://en.wikipedia.org/wiki/Mutual_information\nstats.entropy.mutual = function(values, a, b, counts) {\n  var x = counts ? values.map(a) : values,\n      y = counts ? values.map(b) : a,\n      z = counts ? values.map(counts) : b;\n\n  var px = {},\n\t    py = {},\n\t    i, xx, yy, zz, s = 0, t, N = z.length, p, I = 0;\n\n\tfor (i=0; i<N; ++i) {\n\t  px[x[i]] = 0;\n\t  py[y[i]] = 0;\n  }\n\n\tfor (i=0; i<N; ++i) {\n\t\tpx[x[i]] += z[i];\n\t\tpy[y[i]] += z[i];\n\t\ts += z[i];\n\t}\n\n\tt = 1 / (s * Math.LN2);\n\tfor (i=0; i<N; ++i) {\n\t\tif (z[i] === 0) continue;\n\t\tp = (s * z[i]) / (px[x[i]] * py[y[i]]);\n\t\tI += z[i] * t * Math.log(p);\n\t}\n\n\treturn I;\n};\n\n// Compute a profile of summary statistics for a variable.\nstats.profile = function(values, f) {\n  var p = {},\n      mean = 0,\n      count = 0,\n      distinct = 0,\n      min = null,\n      max = null,\n      M2 = 0,\n      vals = [],\n      u = {}, delta, sd, i, v, x, half, h, h2;\n\n  // compute summary stats\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n\n    // update unique values\n    u[v] = (v in u) ? u[v] + 1 : (distinct += 1, 1);\n\n    if (util.isNotNull(v)) {\n      // update stats\n      x = (typeof v === 'string') ? v.length : v;\n      if (min===null || x < min) min = x;\n      if (max===null || x > max) max = x;\n\n      delta = x - mean;\n      mean = mean + delta / (++count);\n      M2 = M2 + delta * (x - mean);\n      vals.push(x);\n    }\n  }\n  M2 = M2 / (count - 1);\n  sd = Math.sqrt(M2);\n\n  // sort values for median and iqr\n  vals.sort(util.cmp);\n\n  return {\n    unique:   u,\n    count:    count,\n    nulls:    values.length - count,\n    distinct: distinct,\n    min:      min,\n    max:      max,\n    mean:     mean,\n    stdev:    sd,\n    median:   (v = stats.quantile(vals, 0.5)),\n    modeskew: sd === 0 ? 0 : (mean - v) / sd,\n    iqr:      [stats.quantile(vals, 0.25), stats.quantile(vals, 0.75)]\n  };\n};\n\nmodule.exports = stats;","var util = require('./util');\nvar stats = require('./stats');\n\n// Compute profiles for all variables in a data set.\nmodule.exports = function(data, fields) {\n  if (data == null || data.length === 0) return null;\n  fields = fields || util.keys(data[0]);\n\n  var profiles = fields.map(function(f) {\n    var p = stats.profile(data, util.accessor(f));\n    return (p.field = f, p);\n  });\n  \n  profiles.toString = printSummary;\n  return profiles;\n};\n\nfunction printSummary() {\n  var profiles = this;\n  var str = [];\n  profiles.forEach(function(p) {\n    str.push(\"----- Field: '\" + p.field + \"' -----\");\n    if (typeof p.min === 'string' || p.distinct < 10) {\n      str.push(printCategoricalProfile(p));\n    } else {\n      str.push(printQuantitativeProfile(p));\n    }\n    str.push(\"\");\n  });\n  return str.join(\"\\n\");\n}\n\nfunction printQuantitativeProfile(p) {\n  return [\n    \"distinct: \" + p.distinct,\n    \"nulls:    \" + p.nulls,\n    \"min:      \" + p.min,\n    \"max:      \" + p.max,\n    \"median:   \" + p.median,\n    \"mean:     \" + p.mean,\n    \"stdev:    \" + p.stdev,\n    \"modeskew: \" + p.modeskew\n  ].join(\"\\n\");\n}\n\nfunction printCategoricalProfile(p) {\n  var list = [\n    \"distinct: \" + p.distinct,\n    \"nulls:    \" + p.nulls,\n    \"top values: \"\n  ];\n  var u = p.unique;\n  var top = util.keys(u)\n    .sort(function(a,b) { return u[b] - u[a]; })\n    .slice(0, 6)\n    .map(function(v) { return \" '\" + v + \"' (\" + u[v] + \")\"; });\n  return list.concat(top).join(\"\\n\");\n}","var Buffer = require('buffer').Buffer;\nvar u = module.exports = {};\n\n// where are we?\n\nu.isNode = typeof process !== 'undefined'\n        && typeof process.stderr !== 'undefined';\n\n// type checking functions\n\nvar toString = Object.prototype.toString;\n\nu.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nu.isFunction = function(obj) {\n  return toString.call(obj) == '[object Function]';\n};\n\nu.isString = function(obj) {\n  return toString.call(obj) == '[object String]';\n};\n\nu.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nu.isNumber = function(obj) {\n  return !isNaN(parseFloat(obj)) && isFinite(obj);\n};\n\nu.isBoolean = function(obj) {\n  return toString.call(obj) == '[object Boolean]';\n};\n\nu.isDate = function(obj) {\n  return toString.call(obj) == '[object Date]';\n};\n\nu.isNotNull = function(obj) {\n  return obj != null && (typeof obj !== 'number' ? true : !isNaN(obj));\n};\n\nu.isBuffer = (Buffer && Buffer.isBuffer) || u.false;\n\n// type coercion functions\n\nu.number = function(s) { return s == null ? null : +s; };\n\nu.boolean = function(s) { return s == null ? null : s==='false' ? false : !!s; };\n\nu.date = function(s) { return s == null ? null : Date.parse(s); }\n\nu.array = function(x) { return x != null ? (u.isArray(x) ? x : [x]) : []; };\n\nu.str = function(x) {\n  return u.isArray(x) ? \"[\" + x.map(u.str) + \"]\"\n    : u.isObject(x) ? JSON.stringify(x)\n    : u.isString(x) ? (\"'\"+util_escape_str(x)+\"'\") : x;\n};\n\nvar escape_str_re = /(^|[^\\\\])'/g;\n\nfunction util_escape_str(x) {\n  return x.replace(escape_str_re, \"$1\\\\'\");\n}\n\n// utility functions\n\nu.identity = function(x) { return x; };\n\nu.true = function() { return true; };\n\nu.false = function() { return false; };\n\nu.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nu.equal = function(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nu.extend = function(obj) {\n  for (var x, name, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (name in x) { obj[name] = x[name]; }\n  }\n  return obj;\n};\n\nu.keys = function(x) {\n  var keys = [], k;\n  for (k in x) keys.push(k);\n  return keys;\n};\n\nu.vals = function(x) {\n  var vals = [], k;\n  for (k in x) vals.push(x[k]);\n  return vals;\n};\n\nu.toMap = function(list) {\n  return list.reduce(function(obj, x) {\n    return (obj[x] = 1, obj);\n  }, {});\n};\n\nu.keystr = function(values) {\n  // use to ensure consistent key generation across modules\n  return values.join(\"|\");\n};\n\n// data access functions\n\nu.field = function(f) {\n  return f.split(\"\\\\.\")\n    .map(function(d) { return d.split(\".\"); })\n    .reduce(function(a, b) {\n      if (a.length) { a[a.length-1] += \".\" + b.shift(); }\n      a.push.apply(a, b);\n      return a;\n    }, []);\n};\n\nu.accessor = function(f) {\n  var s;\n  return (u.isFunction(f) || f==null)\n    ? f : u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x) { return s.reduce(function(x,f) {\n          return x[f];\n        }, x);\n      }\n    : function(x) { return x[f]; };\n};\n\nu.mutator = function(f) {\n  var s;\n  return u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x, v) {\n        for (var i=0; i<s.length-1; ++i) x = x[s[i]];\n        x[s[i]] = v;\n      }\n    : function(x, v) { x[f] = v; };\n};\n\n\n// comparison / sorting functions\n\nu.comparator = function(sort) {\n  var sign = [];\n  if (sort === undefined) sort = [];\n  sort = u.array(sort).map(function(f) {\n    var s = 1;\n    if      (f[0] === \"-\") { s = -1; f = f.slice(1); }\n    else if (f[0] === \"+\") { s = +1; f = f.slice(1); }\n    sign.push(s);\n    return u.accessor(f);\n  });\n  return function(a,b) {\n    var i, n, f, x, y;\n    for (i=0, n=sort.length; i<n; ++i) {\n      f = sort[i]; x = f(a); y = f(b);\n      if (x < y) return -1 * sign[i];\n      if (x > y) return sign[i];\n    }\n    return 0;\n  };\n};\n\nu.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nu.numcmp = function(a, b) { return a - b; };\n\nu.stablesort = function(array, sortBy, keyFn) {\n  var indices = array.reduce(function(idx, v, i) {\n    return (idx[keyFn(v)] = i, idx);\n  }, {});\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n        sb = sortBy(b);\n    return sa < sb ? -1 : sa > sb ? 1\n         : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n\n  return array;\n};\n\n\n// string functions\n\n// ES6 compatibility per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n// We could have used the polyfill code, but lets wait until ES6 becomes a standard first\nu.startsWith = String.prototype.startsWith\n  ? function(string, searchString) {\n    return string.startsWith(searchString);\n  }\n  : function(string, searchString) {\n    return string.lastIndexOf(searchString, 0) === 0;\n  };\n\nu.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis !== undefined ? String(ellipsis) : \"…\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis\n        + (word ? truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n","'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (vlfield.isCount(this._enc[et])) {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n   // returns whether the encoding has values embedded\n  proto.hasValues = function() {\n    var vals = this.data('values');\n    return vals && vals.length;\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig, excludeData) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    if (!excludeData) {\n      spec.data = util.duplicate(this._data);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].nulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid'], {\n       stroke: {\n         value: encoding.config('gridColor')\n       },\n       opacity: {\n         value: encoding.config('gridOpacity')\n       }\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n","'use strict';\n\nvar summary = module.exports = require('datalib/src/summary');\n\nvar globals = require('../globals');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale');\n\ncompile.aggregate = require('./aggregate');\ncompile.bin = require('./bin');\ncompile.facet = require('./facet');\ncompile.group = require('./group');\ncompile.layout = require('./layout');\ncompile.sort = require('./sort');\ncompile.stack = require('./stack');\ncompile.style = require('./style');\ncompile.subfacet = require('./subfacet');\ncompile.template = require('./template');\ncompile.time = require('./time');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  // no need to pass stats if you pass in the data\n  if (!stats && encoding.hasValues()) {\n    stats = summary(encoding.data('values')).reduce(function(s, p) {\n      s[p.field] = p;\n      return s;\n    }, {});\n  }\n\n  var layout = compile.layout(encoding, stats),\n    style = compile.style(encoding, stats),\n    spec = compile.template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = compile.sort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  compile.bin(spec.data[1], encoding);\n\n  var lineType = marks[encoding.marktype()].line;\n\n  spec = compile.time(spec, encoding);\n\n  // handle subfacets\n  var aggResult = compile.aggregate(spec, encoding),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && compile.stack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    compile.subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = compile.facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n","'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction getMaxLength(encoding, stats, et) {\n  // FIXME determine constant for Q and T in a nicer way\n  return encoding.isType(et, Q) ? 20 :\n    encoding.isType(et, T) ? 20 :\n    stats[encoding.fieldName(et)].max;\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength =  getMaxLength(encoding, stats, x);\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(getMaxLength(encoding, stats, x), 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n","'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n","\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n","'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data'),\n  vlfield = require('../field');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) {\n\n  var data = {name: RAW, format: {}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = encoding.data('url'),\n    dataType = encoding.data('formatType'),\n    values = encoding.data('values');\n\n  if (encoding.hasValues()) {\n    data.values = values;\n  } else {\n    data.url = dataUrl;\n    data.format.type = dataType;\n  }\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (vlfield.isCount(field)) {\n        name = 'count';\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.distinct -\n        (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n","'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n","'use strict';\n\nvar vldata = module.exports = {},\n  vlfield = require('./field'),\n  util = require('./util');\n\n/** Mapping from datalib's inferred type to vegalite's type */\nvldata.types = {\n  'boolean': 'O',\n  'number': 'Q',\n  'integer': 'Q',\n  'date': 'T',\n  'string': 'O'\n};\n\n","// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};","'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].distinct;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n\n  var stat = stats[field.name];\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stat, field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  return stat.distinct -\n    (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n};\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n","// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    values: {\n      type: 'array',\n      description: 'Pass array of objects instead of a url to a file.',\n      items: {\n        type: 'object',\n        additionalProperties: true\n      }\n    }\n  }\n};\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#000'\n    },\n    gridOpacity: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.08\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n","'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}","'use strict';\n\nvar util = module.exports = require('datalib/src/util');\n\nutil.extend(util, require('datalib/src/generate'));\nutil.bin = require('datalib/src/bin');\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bin({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n"],"sourceRoot":"/source/"}